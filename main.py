import random
import argparse
"""
Scripts that outputs a random combination of three words for uniquely identifying machine learning runs or directories at the same time being memorable. 
Chances of collision might be be there so use in less critical situations.

Code generated by combining the repo here https://github.com/Exr0nProjects/witty-phrase-generator/ with ChatGPT
"""
def load_words(filename):
    """Load words from a file, stripping newlines."""
    with open(filename, "r", encoding="utf-8") as f:
        return [line.strip() for line in f if line.strip()]

def generate_phrase(articles, intensifiers, adjectives, nouns, alliteration=False):
    """Generate a witty phrase based on the options provided."""
    if alliteration:
        # Choose a random letter and filter words that start with it
        letter = random.choice('abcdefghijklmnopqrstuvwxyz')
        intensifiers = [w for w in intensifiers if w.lower().startswith(letter)]
        adjectives = [w for w in adjectives if w.lower().startswith(letter)]
        nouns = [w for w in nouns if w.lower().startswith(letter)]
        
        # If any category is empty, fall back to non-alliteration
        if not (intensifiers and adjectives and nouns):
            return generate_phrase(articles, intensifiers, adjectives, nouns, alliteration=False)
    
    article = random.choice(articles)
    intensifier = random.choice(intensifiers)
    adjective = random.choice(adjectives)
    noun = random.choice(nouns)
    
    return f"{intensifier}-{adjective}-{noun}"

def main():
    parser = argparse.ArgumentParser(description="Generate witty phrases.")
    parser.add_argument("-n", type=int, default=1, help="Number of phrases to generate")
    parser.add_argument("--alliteration", action="store_true", help="Use alliteration mode")
    args = parser.parse_args()
    
    # Load word lists
    articles = ["The", "A", "An"]  # Small fixed list
    intensifiers = load_words("intensifiers.txt")
    adjectives = load_words("adjectives.txt")
    nouns = load_words("nouns.txt")
    
    # Generate phrases
    for _ in range(args.n):
        print(generate_phrase(articles, intensifiers, adjectives, nouns, args.alliteration))

if __name__ == "__main__":
    main()
